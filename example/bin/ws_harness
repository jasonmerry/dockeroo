#!/usr/bin/env bash

curr_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
dockeroo_dir=../bin
. $dockeroo_dir/test_commons.sh
harness="env dockeroo_quiet=true $dockeroo_dir/harness"
node_count=10
cluster_nodes=""
for i in $(seq 1 $node_count);
do
  cluster_nodes="$cluster_nodes c$i"
done
cluster_nodes="$cluster_nodes s1"

green="\033[32m"
red="\033[31m"
bold="\033[1m"
reset="\033[0m"

usage() {
  echo "  Usage:"
  echo "    help:                                display this"
  echo "    cluster delete:                      delete cluster"
  echo "    cluster create-ws:                   create WS cluster"
  echo "    cluster create-http:                 create HTTP cluster"
  echo "    test tools:                          test dockeroo tools"
  echo "    test erl-ws:                         test Erlang WS server"
  echo "    test erl-http:                       test Erlang HTTP server"
  echo "    test go-http:                        test Erlang HTTP server"
  echo "    test erl-ws-iptables:                test Erlang WS server and iptables drop/accept"
  echo "    test erl-http-iptables:              test Erlang HTTP server and iptables drop/accept"
  echo "    test go-http-iptables:               test Go HTTP server and iptables drop/accept"
  echo "    test scala-ws-iptables:              test Scala WS server and iptables drop/accept"
  echo "    test scala-http-iptables:            test Scala HTTP server and iptables drop/accept"
  echo "    report:                              report from the last run"
  echo "    report-all:                          shortcut to run and report all tests"
  echo "    ... or dockeroo commands:"
  $harness help
  exit 1
}

delete_cluster() {
  echo "  ...deleting cluster"
  docker unpause $cluster_nodes
  docker rm -f $cluster_nodes
}

create_erl_server() {
  echo "  ...creating erl server"
  docker run --name "s1" --hostname "s1" --privileged -v $(pwd)/apps/erl/echo_server:/dev/host-server -tid "ws/server_erl" echo_server
}

create_go_server() {
  echo "  ...creating go server"
  docker run --name "s1" --hostname "s1" --privileged -tid "ws/server_go"
}

create_erl_ws_clients() {
  echo "  ...creating erl ws clients"
  for i in $(seq 1 $node_count);
  do
    docker run --name "c$i" --hostname "c$i" --privileged -v $(pwd)/apps/erl/client:/dev/host-client --link s1:s1 -tid "ws/client" client_ws start ws://s1:8888/echo-ws
  done
}

create_erl_http_clients() {
  echo "  ...creating erl http clients"
  for i in $(seq 1 $node_count);
  do
    docker run --name "c$i" --hostname "c$i" --privileged -v $(pwd)/apps/erl/client:/dev/host-client --link s1:s1 -tid "ws/client" client_http start http://s1:8888/echo-http
  done
}

stop_cluster() {
  docker stop --time=5 $cluster_nodes
}

verify_report_name() {
  if [ "$1" == "" ]
  then
    echo "  No report name specified"
    usage
  fi
}

test_client_server() {
  delete_cluster
  local create_server_cmd=$1
  local create_clients_cmd=$2
  local test_length=100 #s
  set -e
  $create_server_cmd
  $create_clients_cmd
  echo "  ...sleeping for test length = ${test_length}s"
  sleep $test_length
  echo "  ...stopping cluster"
  stop_cluster
}

test_client_server_with_ip_tables() {
  delete_cluster
  set -e
  local create_server_cmd=$1
  local create_clients_cmd=$2
  $create_server_cmd
  $create_clients_cmd
  local i=1
  while [ $i -le 5 ]
  do
    echo "  ...$i: flip iptables"
    $harness iptables drop OUTPUT s1
    sleep 5
    $harness iptables accept s1
    sleep 10
    i=$[$i+1]
  done
  echo "  ...stopping cluster"
  stop_cluster
}

if [[ $# -lt 1 || "$1" == "help" ]]; then usage; fi

case "$1 $2" in
  "cluster delete")
    delete_cluster
    ;;
  "cluster create-ws")
    set -e
    create_erl_server
    create_erl_ws_clients
    ;;
  "cluster create-http")
    set -e
    create_erl_server
    create_erl_http_clients
    ;;
  "test tools")
    delete_cluster
    set -e
    docker run --name "s1" --hostname "s1" --privileged -tid --entrypoint=netcat "ws/server_erl" -lk 1234
    # send msg1 - should get through
    echo msg1 | docker run --rm --name "c1" --privileged --link s1:s1 -i --entrypoint=netcat "ws/client" -w 5 s1 1234
    # pause, send msg2, unpause.  Message should get through *after* unpause
    $harness node pause s1
    set +e
    echo msg2 | docker run --rm --name "c1" --privileged --link s1:s1 -i --entrypoint=netcat "ws/client" -w 5 s1 1234
    set -e
    $harness node unpause s1
    # iptables drop, send msg3-should-be-dropped, iptables accept.  Message should not get through
    $harness iptables drop INPUT s1
    set +e
    echo msg3-should-be-dropped | docker run --rm --name "c1" --privileged --link s1:s1 -i --entrypoint=netcat "ws/client" -w 5 s1 1234
    set -e
    $harness iptables accept s1
    # send another message to confirm connectivity
    echo msg4 | docker run --name "c1" --privileged --link s1:s1 -i --entrypoint=netcat "ws/client" -w 5 s1 1234
    # expect all but the iptables dropped messages
    expected_msg_log=$'msg1\nmsg2\nmsg4'
    assert_eq "client message got through" "$expected_msg_log" "$(docker logs s1 | sed 's/.$//')"  # remove ^Ms
    ;;
  "test erl-ws")
    test_client_server create_erl_server create_erl_ws_clients
    ;;
  "test erl-http")
    test_client_server create_erl_server create_erl_http_clients
    ;;
  "test go-http")
    test_client_server create_go_server create_erl_http_clients
    ;;
  "test erl-ws-iptables")
    test_client_server_with_ip_tables create_erl_server create_erl_ws_clients
    ;;
  "test erl-http-iptables")
    test_client_server_with_ip_tables create_erl_server create_erl_http_clients
    ;;
  "test go-http-iptables")
    test_client_server_with_ip_tables create_go_server create_erl_http_clients
    ;;
  "test scala-ws-iptables")
    echo -e "  ${red}test scala-ws-iptables unimplemented${reset}"
    exit -11
    ;;
  "test scala-http-iptables")
    echo -e "  ${red}test scala-http-iptables unimplemented${reset}"
    exit -11
    ;;
  *)
    case "$1" in 
      "report")
        verify_report_name $2
        report_name=$2
        report_dir=report/$report_name
        echo "  ...copy report templates"
        rm -rf $report_dir
        mkdir -p report
        cp -r src/ws/report/fs/opt/dockeroo/report_template $report_dir
        echo "  ...merge reports cluster"
        docker logs c1 > $report_dir/raw.csv
        for i in $(seq 2 $node_count);
        do
          docker logs c$i | tail -n+2 >> $report_dir/raw.csv
        done
        echo "  ...consolidate start|end|error events"
        docker run --rm --name "report_consolidate" --privileged -v $(pwd)/$report_dir:/dev/host-report --workdir=/dev/host-report -ti "ws/report" /opt/dockeroo/consolidate.py raw.csv raw.consolidated.csv
        echo "  ...generate html reporter"
        docker run --rm --name "report_generate" --privileged -v $(pwd)/$report_dir:/dev/host-report --workdir=/dev/host-report -ti "ws/report" /opt/dockeroo/orchestrate.py raw.consolidated.csv $report_name
        echo "  ...report ready @ file://$(pwd)/$report_dir/report.html..."
        ;;
    "report-all")
        $0 test erl-ws && $0 report erl-ws
        $0 test erl-http && $0 report erl-http
        $0 test go-http && $0 report go-http
        # $0 test go-ws && $0 report go-ws
        $0 test erl-ws-iptables && $0 report erl-ws-iptables
        $0 test erl-http-iptables && $0 report erl-http-iptables
        $0 test go-http-iptables && $0 report go-http-iptables
        # $0 test go-ws-iptables && $0 report go-ws-iptables
        ;;
      *)
        echo -e "  ${bold}Not a $(basename $0) command, delegating to dockeroo${reset}"
        $harness $@
        ;;
    esac
    ;;
esac

echo
