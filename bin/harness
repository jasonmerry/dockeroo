#!/usr/bin/env bash

green="\033[32m"
red="\033[31m"
white="\033[97m"
bold="\033[1m"
underline="\033[4m"
reset="\033[0m"

banner() {
  echo -e "$green"
  echo "      _            _                            "
  echo "   __| | ___   ___| | _____ _ __ ___   ___    _ "
  echo "  / _  |/ _ \ / __| |/ / _ \ '__/ _ \ / _ \  (_)"
  echo " | (_| | (_) | (__|   <  __/ | | (_) | (_) |  _ "
  echo "  \__,_|\___/ \___|_|\_\___|_|  \___/ \___/  (_)"
  echo -e "$reset"
}

usage() {
  echo "  Usage:"
  echo "    help:                            display this"
  echo "    images create [--all]:           create node image"
  echo "    images delete [--all]:           delete node image, --all includes */base.*"
  echo "    cluster status:                  show images/nodes status"
  echo "    cluster cleanup:                 delete dangling (untagged) and debug images/nodes"
  echo "    node pause <id>:                 pause node <id>"
  echo "    node unpause <id>:               unpause node <id>"
  echo "    node attach <id>:                attach to node <id>"
  echo "    node logs <id>:                  show log for node <id>"
  echo "    node exec <id> [<cmds>...]:      run [<cmds>...] on node <id>"
  echo "    node revive <id>:                revive dead node in a new container, running bash"
  echo "    iptables accept <id>:            iptables accept on node <id>"
  echo "    iptables drop <id> [<prob>]:     iptables drop on node <id> if exceeds <prob> (<prob> defaults to 1)"
  echo "    iptables status <id>:            iptables -L on node <id>"
  echo "    report:                          produce report"
  exit 1
}

verify_nodeid() {
  if [ "$1" == "" ]
  then
    echo "  No node id specified"
    usage
  fi
}

dockerable_dirs() {
  dirs=$(find src -name "Dockerfile" -exec dirname {} \; | sort)
  if [ "$1" == "--all" ]
  then
    echo $dirs
  else
    echo $dirs | sed 's/[^ ].*base[^ ]*//g'
  fi
}

dockerables() {
  all=""
  for dir in $(dockerable_dirs $1)
  do
    all="$all ${dir#*/}"
  done
  echo $all
}

container_id() {
  local nodename=$1
  echo $(docker inspect -f '{{ .Id }}' $nodename)
}

container_ip() {
  local nodename=$1
  echo $(docker inspect -f '{{ .NetworkSettings.IPAddress }}' $nodename)
}

# banner & initial check
if [ "$dockeroo_quiet" != "true" ];  then banner; fi
if [[ $# -lt 1 || "$1" == "help" ]]; then usage;  fi

case "$1 $2" in
  "images create")
    for dir in $(dockerable_dirs $3)
    do
      dockerable=${dir#*/}
      echo "  ...creating $dockerable from $dir:"
      docker build -t $dockerable $dir
    done
    ;;
  "images delete")
    all_images=$(dockerables $3)
    echo "  ...deleting images $all_images..."
    docker rmi -f $all_images
    ;;
  # "cluster create")
  #   # temporary!!!
  #   set -e -u
  #   docker run --name "n1" --hostname "n1" --privileged -v $(pwd)/../..:/dev/host -tid "$dockeroo_ns/_otp16b03"
  #   docker run --name "n2" --hostname "n2" --privileged -v $(pwd)/../..:/dev/host -tid "$dockeroo_ns/_otp17.5"
  #   docker run --name "n3" --hostname "n3" --privileged -v $(pwd)/../..:/dev/host -tid "$dockeroo_ns/_otp18.1"
  #   ;;
  # "cluster delete")
  #   # temporary!!!
  #   docker rm -f n1 n2 n3
  #   ;;
  "cluster cleanup")
    dockeroo_ns=$3
    echo "  ...deleting dangling/untagged nodes..."
    dangling_images=$(docker images | tail -n+2 | grep "<none>" | awk '{ printf "%s ", $3}')
    revived_images=$(docker images | tail -n+2 | grep "revived_" | awk '{ printf "%s ", $3}')
    if [ "" == "$dockeroo_ns" ]
    then
      dangling_nodes=$(docker ps -a | tail -n+2 | awk '{ printf "%s ", $1}')
    else
      dangling_nodes=$(docker ps -a | tail -n+2 | grep -v $dockeroo_ns | awk '{ printf "%s ", $1}')
    fi
    echo
    if [ "" == "$dangling_nodes" ]
    then
      echo "  ...no dangling nodes!"
    else
      echo "  ...unpausing, stopping and deleting nodes:"
      # docker unpause $dangling_nodes
      # docker stop $dangling_nodes
      docker rm -f $dangling_nodes
    fi
    echo
    if [ " " == "$dangling_images $revived_images" ]
    then
      echo "  ...no dangling/crashed images!"
    else
      echo "  ...removing images:"
      docker rmi -f $dangling_images $revived_images
    fi
    ;;
  "cluster status")
    set -e -u
    docker_dirs=$(echo $(dockerables --all | sed 's/ /\\n/g'))
    echo "  ...image definitions:"
    echo -e $docker_dirs
    echo
    echo "  ...live images:"
    docker images
    echo
    echo "  ...processes:"
    docker ps -a
    ;;
  "node pause")
    verify_nodeid $3
    nodeid=$3
    set -e -u
    echo "  ...pausing node $nodeid..."
    docker pause $nodeid
    ;;
  "node unpause")
    verify_nodeid $3
    nodeid=$3
    set -e -u
    echo "  ...unpause node $nodeid..."
    docker unpause $nodeid
    ;;
  "node attach")
    verify_nodeid $3
    nodeid=$3
    set -e -u
    echo -e "  ...attach node $nodeid, to detach: ${underline}${bold}${white}ctrl-p & ctrl-q${reset}"
    docker attach $nodeid
    ;;
  "node logs")
    verify_nodeid $3
    nodeid=$3
    set -e -u
    shift 3
    echo "  ...log for node $nodeid $@..."
    docker logs $@ $nodeid
    ;;
  "node exec")
    verify_nodeid $3
    nodeid=$3
    set -e -u
    shift 3
    echo "  ...exec cmds on node $nodeid: $@..."
    docker exec -tiu root $nodeid $@
    ;;
  "node revive")
    verify_nodeid $3
    nodeid=$3
    set -e -u
    containerid=$(container_id $nodeid)
    dbg_image=revived_${nodeid}
    dbg_nodeid=revived_${nodeid}
    echo -e "  ...continue in bash after crash of $nodeid, to detach: ${underline}${bold}${white}ctrl-p & ctrl-q${reset}"
    set +e
    docker rm -f $dbg_nodeid
    docker rmi -f $dbg_image
    set -e
    docker commit $containerid $dbg_image
    docker run --name $dbg_nodeid --hostname $dbg_nodeid -u root -ti --entrypoint=bash $dbg_image
    ;;
  "iptables accept")
    verify_nodeid $3
    nodeid=$3
    set -e -u
    echo "  ...accept traffic to node $nodeid..."
    docker exec -tiu root $nodeid iptables -F
    ;;
  "iptables drop")
    verify_nodeid $3
    nodeid=$3
    set -e -u
    if [ $# -gt 3 ]
    then
      prob=$4
      echo "  ...drop traffic to node $nodeid over probability $prob..."
      docker exec -tiu root $nodeid iptables -F
      docker exec -tiu root $nodeid iptables -A INPUT -m statistic --mode random --probability $prob -j DROP
    else
      echo "  ...drop all traffic to node $nodeid..."
      docker exec -tiu root $nodeid iptables -F
      docker exec -tiu root $nodeid iptables -A INPUT -j DROP
    fi
    ;;
  "iptables status")
    verify_nodeid $3
    nodeid=$3
    set -e -u
    echo "  ...show iptables status for node $nodeid..."
    docker exec -tiu root $nodeid iptables -L -v
    ;;
  "report ")
    set -e -u
    echo "  ...fetching report data..."
    docker logs s1 --tail=all | tail -n +8 > report/s1.csv
    echo
    echo "  ...generating report graphs..."
    docker run --name reporter -ti -u root -v $(pwd)/..:/dev/host --entrypoint /usr/local/bin/plot_csv test_cluster /dev/host/docker_cluster/report/s1.csv ts duration --xsize=8 --ysize=4
    docker rm reporter
    echo
    echo "  ... report ready @ file://$pwd/report/report.html..."
    ;;
  *)
    echo "  Invalid command: $1 $2"
    usage
    ;;
esac

echo
